<?php

/**
 * This file is part of PHPWord - A pure PHP library for reading and writing
 * word processing documents.
 *
 * PHPWord is free software distributed under the terms of the GNU Lesser
 * General Public License version 3 as published by the Free Software Foundation.
 *
 * For the full copyright and license information, please read the LICENSE
 * file that was distributed with this source code. For the full list of
 * contributors, visit https://github.com/PHPOffice/PHPWord/contributors.
 *
 * @see         https://github.com/PHPOffice/PHPWord
 * @copyright   2010-2018 PHPWord contributors
 * @license     http://www.gnu.org/licenses/lgpl.txt LGPL version 3
 */

namespace PhpOffice\PhpWord\Writer;

use PhpOffice\PhpWord\PhpWord;

/**
 * HTML writer
 *
 * Not supported: PreserveText, PageBreak, Object
 * @since 0.10.0
 */
class HTML extends AbstractWriter implements WriterInterface
{
    /**
     * Is the current writer creating PDF?
     *
     * @var bool
     */
    protected $isPdf = false;

    /**
     * Footnotes and endnotes collection
     *
     * @var array
     */
    protected $notes = array();

    /**
     * Create new instance
     */
    public function __construct(PhpWord $phpWord = null)
    {
        $this->setPhpWord($phpWord);

        $this->parts = array('Head', 'Body');
        foreach ($this->parts as $partName) {
            $partClass = 'PhpOffice\\PhpWord\\Writer\\HTML\\Part\\' . $partName;
            if (class_exists($partClass)) {
                /** @var \PhpOffice\PhpWord\Writer\HTML\Part\AbstractPart $part Type hint */
                $part = new $partClass();
                $part->setParentWriter($this);
                $this->writerParts[strtolower($partName)] = $part;
            }
        }
    }

    /**
     * Save PhpWord to file.
     *
     * @param string $filename
     *
     * @throws \PhpOffice\PhpWord\Exception\Exception
     */
    public function save($filename = null): void
    {
        $this->writeFile($this->openFile($filename), $this->getContent());
    }

    /**
     * Get content
     *
     * @return string
     * @since 0.11.0
     */
    /*
	public function getContent()
    {
        $content = '';

        $content .= '<!DOCTYPE html>' . PHP_EOL;
        $content .= '<!-- Generated by PHPWord -->' . PHP_EOL;
        $content .= '<html>' . PHP_EOL;
        $content .= $this->getWriterPart('Head')->write();
        $content .= $this->getWriterPart('Body')->write();
        $content .= '</html>' . PHP_EOL;

        return $content;
    }
*/
    public function getContent()
    {
        $content = '';
        $content .= '<!DOCTYPE html>' . PHP_EOL;
        $content .= '<!-- Generated by PHPWord -->' . PHP_EOL;
        $content .= '<html>' . PHP_EOL;
        $content .= $this->getWriterPart('Head')->write();
        $content .= $this->getWriterPart('Body')->write();
        $lines = explode(PHP_EOL, $content);
        $content .= '</html>' . PHP_EOL;
        $newcontent = '';
        $prev_was_li = false;
        $list_type = '';
        foreach ($lines as $line) {
            //$current-level = 0;
            if (preg_match('/( |^)<li data-depth/', $line)) {
                /** use the data-depth, data-liststyle and data-numid to add <ul> </ul> <ol></ol> 
                 * where needed
                 */

                $tags = $this->parseTag($line, 'li');
                //dd($tags['data-numid'] == '8');
                if (!$prev_was_li) {
                    if ($tags['data-numid'] == '8') {
                        //$line = '<ul>' . $line . '</ul>';
                        $newcontent .= '<ul>' . PHP_EOL . $line  . PHP_EOL;
                        $list_type = 'ul';
                    } else {
                        $newcontent .= '<ol>' . PHP_EOL . $line  . PHP_EOL;
                        $list_type = 'ol';
                    }
                } else {
                    $newcontent .= $line . PHP_EOL;
                }
                $prev_was_li = true;
                //$newcontent .= $line;
            } else {
                if ($prev_was_li) {
                    $newcontent .= '</' . $list_type . '>' . PHP_EOL . $line . PHP_EOL;
                } else {
                    $newcontent .= $line . PHP_EOL;
                }
                $prev_was_li = false;
            }
        }
        $content = $newcontent;

        return $content;
    }
    function parseTag($content, $tg)
    {
        $dom = new \DOMDocument;
        $dom->loadHTML($content);
        $attr = array();
        foreach ($dom->getElementsByTagName($tg) as $tag) {
            foreach ($tag->attributes as $attribName => $attribNodeVal) {
                $attr[$attribName] = $tag->getAttribute($attribName);
            }
        }
        return $attr;
    }
    /**
     * Get is PDF
     *
     * @return bool
     */
    public function isPdf()
    {
        return $this->isPdf;
    }

    /**
     * Get notes
     *
     * @return array
     */
    public function getNotes()
    {
        return $this->notes;
    }

    /**
     * Add note.
     *
     * @param int $noteId
     * @param string $noteMark
     */
    public function addNote($noteId, $noteMark)
    {
        $this->notes[$noteId] = $noteMark;
    }

    /**
     * Write document
     *
     * @deprecated 0.11.0
     *
     * @return string
     *
     * @codeCoverageIgnore
     */
    public function writeDocument()
    {
        return $this->getContent();
    }
}
